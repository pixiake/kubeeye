/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	kubeeyev1alpha2 "github.com/kubesphere/kubeeye/apis/kubeeye/v1alpha2"
)

// InspectResultStatusApplyConfiguration represents a declarative configuration of the InspectResultStatus type for use
// with apply.
type InspectResultStatusApplyConfiguration struct {
	Complete      *bool                          `json:"complete,omitempty"`
	Policy        *kubeeyev1alpha2.Policy        `json:"policy,omitempty"`
	Duration      *string                        `json:"duration,omitempty"`
	TaskStartTime *string                        `json:"taskStartTime,omitempty"`
	TaskEndTime   *string                        `json:"taskEndTime,omitempty"`
	Level         map[kubeeyev1alpha2.Level]*int `json:"level,omitempty"`
}

// InspectResultStatusApplyConfiguration constructs a declarative configuration of the InspectResultStatus type for use with
// apply.
func InspectResultStatus() *InspectResultStatusApplyConfiguration {
	return &InspectResultStatusApplyConfiguration{}
}

// WithComplete sets the Complete field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Complete field is set to the value of the last call.
func (b *InspectResultStatusApplyConfiguration) WithComplete(value bool) *InspectResultStatusApplyConfiguration {
	b.Complete = &value
	return b
}

// WithPolicy sets the Policy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Policy field is set to the value of the last call.
func (b *InspectResultStatusApplyConfiguration) WithPolicy(value kubeeyev1alpha2.Policy) *InspectResultStatusApplyConfiguration {
	b.Policy = &value
	return b
}

// WithDuration sets the Duration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Duration field is set to the value of the last call.
func (b *InspectResultStatusApplyConfiguration) WithDuration(value string) *InspectResultStatusApplyConfiguration {
	b.Duration = &value
	return b
}

// WithTaskStartTime sets the TaskStartTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TaskStartTime field is set to the value of the last call.
func (b *InspectResultStatusApplyConfiguration) WithTaskStartTime(value string) *InspectResultStatusApplyConfiguration {
	b.TaskStartTime = &value
	return b
}

// WithTaskEndTime sets the TaskEndTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TaskEndTime field is set to the value of the last call.
func (b *InspectResultStatusApplyConfiguration) WithTaskEndTime(value string) *InspectResultStatusApplyConfiguration {
	b.TaskEndTime = &value
	return b
}

// WithLevel puts the entries into the Level field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Level field,
// overwriting an existing map entries in Level field with the same key.
func (b *InspectResultStatusApplyConfiguration) WithLevel(entries map[kubeeyev1alpha2.Level]*int) *InspectResultStatusApplyConfiguration {
	if b.Level == nil && len(entries) > 0 {
		b.Level = make(map[kubeeyev1alpha2.Level]*int, len(entries))
	}
	for k, v := range entries {
		b.Level[k] = v
	}
	return b
}
