/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// KubeeyeOpaResultApplyConfiguration represents a declarative configuration of the KubeeyeOpaResult type for use
// with apply.
type KubeeyeOpaResultApplyConfiguration struct {
	*ScoreInfoApplyConfiguration `json:"scoreInfo,omitempty"`
	ResourceResults              []ResourceResultApplyConfiguration `json:"resourceResults,omitempty"`
	Percent                      *int                               `json:"percent,omitempty"`
	*ExtraInfoApplyConfiguration `json:"extraInfo,omitempty"`
}

// KubeeyeOpaResultApplyConfiguration constructs a declarative configuration of the KubeeyeOpaResult type for use with
// apply.
func KubeeyeOpaResult() *KubeeyeOpaResultApplyConfiguration {
	return &KubeeyeOpaResultApplyConfiguration{}
}

// WithScore sets the Score field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Score field is set to the value of the last call.
func (b *KubeeyeOpaResultApplyConfiguration) WithScore(value int) *KubeeyeOpaResultApplyConfiguration {
	b.ensureScoreInfoApplyConfigurationExists()
	b.ScoreInfoApplyConfiguration.Score = &value
	return b
}

// WithTotal sets the Total field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Total field is set to the value of the last call.
func (b *KubeeyeOpaResultApplyConfiguration) WithTotal(value int) *KubeeyeOpaResultApplyConfiguration {
	b.ensureScoreInfoApplyConfigurationExists()
	b.ScoreInfoApplyConfiguration.Total = &value
	return b
}

// WithDangerous sets the Dangerous field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Dangerous field is set to the value of the last call.
func (b *KubeeyeOpaResultApplyConfiguration) WithDangerous(value int) *KubeeyeOpaResultApplyConfiguration {
	b.ensureScoreInfoApplyConfigurationExists()
	b.ScoreInfoApplyConfiguration.Dangerous = &value
	return b
}

// WithWarning sets the Warning field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Warning field is set to the value of the last call.
func (b *KubeeyeOpaResultApplyConfiguration) WithWarning(value int) *KubeeyeOpaResultApplyConfiguration {
	b.ensureScoreInfoApplyConfigurationExists()
	b.ScoreInfoApplyConfiguration.Warning = &value
	return b
}

// WithIgnore sets the Ignore field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ignore field is set to the value of the last call.
func (b *KubeeyeOpaResultApplyConfiguration) WithIgnore(value int) *KubeeyeOpaResultApplyConfiguration {
	b.ensureScoreInfoApplyConfigurationExists()
	b.ScoreInfoApplyConfiguration.Ignore = &value
	return b
}

// WithPassing sets the Passing field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Passing field is set to the value of the last call.
func (b *KubeeyeOpaResultApplyConfiguration) WithPassing(value int) *KubeeyeOpaResultApplyConfiguration {
	b.ensureScoreInfoApplyConfigurationExists()
	b.ScoreInfoApplyConfiguration.Passing = &value
	return b
}

func (b *KubeeyeOpaResultApplyConfiguration) ensureScoreInfoApplyConfigurationExists() {
	if b.ScoreInfoApplyConfiguration == nil {
		b.ScoreInfoApplyConfiguration = &ScoreInfoApplyConfiguration{}
	}
}

// WithResourceResults adds the given value to the ResourceResults field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ResourceResults field.
func (b *KubeeyeOpaResultApplyConfiguration) WithResourceResults(values ...*ResourceResultApplyConfiguration) *KubeeyeOpaResultApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithResourceResults")
		}
		b.ResourceResults = append(b.ResourceResults, *values[i])
	}
	return b
}

// WithPercent sets the Percent field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Percent field is set to the value of the last call.
func (b *KubeeyeOpaResultApplyConfiguration) WithPercent(value int) *KubeeyeOpaResultApplyConfiguration {
	b.Percent = &value
	return b
}

// WithWorkloadsCount sets the WorkloadsCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WorkloadsCount field is set to the value of the last call.
func (b *KubeeyeOpaResultApplyConfiguration) WithWorkloadsCount(value int) *KubeeyeOpaResultApplyConfiguration {
	b.ensureExtraInfoApplyConfigurationExists()
	b.ExtraInfoApplyConfiguration.WorkloadsCount = &value
	return b
}

// WithNamespacesList adds the given value to the NamespacesList field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NamespacesList field.
func (b *KubeeyeOpaResultApplyConfiguration) WithNamespacesList(values ...string) *KubeeyeOpaResultApplyConfiguration {
	b.ensureExtraInfoApplyConfigurationExists()
	for i := range values {
		b.ExtraInfoApplyConfiguration.NamespacesList = append(b.ExtraInfoApplyConfiguration.NamespacesList, values[i])
	}
	return b
}

func (b *KubeeyeOpaResultApplyConfiguration) ensureExtraInfoApplyConfigurationExists() {
	if b.ExtraInfoApplyConfiguration == nil {
		b.ExtraInfoApplyConfiguration = &ExtraInfoApplyConfiguration{}
	}
}
