/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	kubeeyev1alpha2 "github.com/kubesphere/kubeeye/apis/kubeeye/v1alpha2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// InspectPlanStatusApplyConfiguration represents a declarative configuration of the InspectPlanStatus type for use
// with apply.
type InspectPlanStatusApplyConfiguration struct {
	LastScheduleTime  *v1.Time                      `json:"lastScheduleTime,omitempty"`
	LastTaskStartTime *v1.Time                      `json:"lastTaskStartTime,omitempty"`
	LastTaskEndTime   *v1.Time                      `json:"lastTaskEndTime,omitempty"`
	LastTaskName      *string                       `json:"lastTaskName,omitempty"`
	TaskNames         []TaskNamesApplyConfiguration `json:"TaskNames,omitempty"`
	LastTaskStatus    *kubeeyev1alpha2.Phase        `json:"lastTaskStatus,omitempty"`
	NextScheduleTime  *v1.Time                      `json:"nextScheduleTime,omitempty"`
}

// InspectPlanStatusApplyConfiguration constructs a declarative configuration of the InspectPlanStatus type for use with
// apply.
func InspectPlanStatus() *InspectPlanStatusApplyConfiguration {
	return &InspectPlanStatusApplyConfiguration{}
}

// WithLastScheduleTime sets the LastScheduleTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastScheduleTime field is set to the value of the last call.
func (b *InspectPlanStatusApplyConfiguration) WithLastScheduleTime(value v1.Time) *InspectPlanStatusApplyConfiguration {
	b.LastScheduleTime = &value
	return b
}

// WithLastTaskStartTime sets the LastTaskStartTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastTaskStartTime field is set to the value of the last call.
func (b *InspectPlanStatusApplyConfiguration) WithLastTaskStartTime(value v1.Time) *InspectPlanStatusApplyConfiguration {
	b.LastTaskStartTime = &value
	return b
}

// WithLastTaskEndTime sets the LastTaskEndTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastTaskEndTime field is set to the value of the last call.
func (b *InspectPlanStatusApplyConfiguration) WithLastTaskEndTime(value v1.Time) *InspectPlanStatusApplyConfiguration {
	b.LastTaskEndTime = &value
	return b
}

// WithLastTaskName sets the LastTaskName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastTaskName field is set to the value of the last call.
func (b *InspectPlanStatusApplyConfiguration) WithLastTaskName(value string) *InspectPlanStatusApplyConfiguration {
	b.LastTaskName = &value
	return b
}

// WithTaskNames adds the given value to the TaskNames field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TaskNames field.
func (b *InspectPlanStatusApplyConfiguration) WithTaskNames(values ...*TaskNamesApplyConfiguration) *InspectPlanStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTaskNames")
		}
		b.TaskNames = append(b.TaskNames, *values[i])
	}
	return b
}

// WithLastTaskStatus sets the LastTaskStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastTaskStatus field is set to the value of the last call.
func (b *InspectPlanStatusApplyConfiguration) WithLastTaskStatus(value kubeeyev1alpha2.Phase) *InspectPlanStatusApplyConfiguration {
	b.LastTaskStatus = &value
	return b
}

// WithNextScheduleTime sets the NextScheduleTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NextScheduleTime field is set to the value of the last call.
func (b *InspectPlanStatusApplyConfiguration) WithNextScheduleTime(value v1.Time) *InspectPlanStatusApplyConfiguration {
	b.NextScheduleTime = &value
	return b
}
