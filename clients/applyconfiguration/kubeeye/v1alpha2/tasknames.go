/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	kubeeyev1alpha2 "github.com/kubesphere/kubeeye/apis/kubeeye/v1alpha2"
)

// TaskNamesApplyConfiguration represents a declarative configuration of the TaskNames type for use
// with apply.
type TaskNamesApplyConfiguration struct {
	Name       *string                `json:"name,omitempty"`
	TaskStatus *kubeeyev1alpha2.Phase `json:"taskStatus,omitempty"`
}

// TaskNamesApplyConfiguration constructs a declarative configuration of the TaskNames type for use with
// apply.
func TaskNames() *TaskNamesApplyConfiguration {
	return &TaskNamesApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *TaskNamesApplyConfiguration) WithName(value string) *TaskNamesApplyConfiguration {
	b.Name = &value
	return b
}

// WithTaskStatus sets the TaskStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TaskStatus field is set to the value of the last call.
func (b *TaskNamesApplyConfiguration) WithTaskStatus(value kubeeyev1alpha2.Phase) *TaskNamesApplyConfiguration {
	b.TaskStatus = &value
	return b
}
