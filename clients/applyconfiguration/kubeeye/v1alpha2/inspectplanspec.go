/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// InspectPlanSpecApplyConfiguration represents a declarative configuration of the InspectPlanSpec type for use
// with apply.
type InspectPlanSpecApplyConfiguration struct {
	Schedule    *string                              `json:"schedule,omitempty"`
	Suspend     *bool                                `json:"suspend,omitempty"`
	Timeout     *string                              `json:"timeout,omitempty"`
	RuleNames   []InspectRuleNamesApplyConfiguration `json:"ruleNames,omitempty"`
	MaxTasks    *int                                 `json:"maxTasks,omitempty"`
	ClusterName []ClusterApplyConfiguration          `json:"clusterName,omitempty"`
	KubeConfig  *string                              `json:"kubeConfig,omitempty"`
	Once        *v1.Time                             `json:"one,omitempty"`
}

// InspectPlanSpecApplyConfiguration constructs a declarative configuration of the InspectPlanSpec type for use with
// apply.
func InspectPlanSpec() *InspectPlanSpecApplyConfiguration {
	return &InspectPlanSpecApplyConfiguration{}
}

// WithSchedule sets the Schedule field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Schedule field is set to the value of the last call.
func (b *InspectPlanSpecApplyConfiguration) WithSchedule(value string) *InspectPlanSpecApplyConfiguration {
	b.Schedule = &value
	return b
}

// WithSuspend sets the Suspend field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Suspend field is set to the value of the last call.
func (b *InspectPlanSpecApplyConfiguration) WithSuspend(value bool) *InspectPlanSpecApplyConfiguration {
	b.Suspend = &value
	return b
}

// WithTimeout sets the Timeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timeout field is set to the value of the last call.
func (b *InspectPlanSpecApplyConfiguration) WithTimeout(value string) *InspectPlanSpecApplyConfiguration {
	b.Timeout = &value
	return b
}

// WithRuleNames adds the given value to the RuleNames field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the RuleNames field.
func (b *InspectPlanSpecApplyConfiguration) WithRuleNames(values ...*InspectRuleNamesApplyConfiguration) *InspectPlanSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRuleNames")
		}
		b.RuleNames = append(b.RuleNames, *values[i])
	}
	return b
}

// WithMaxTasks sets the MaxTasks field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxTasks field is set to the value of the last call.
func (b *InspectPlanSpecApplyConfiguration) WithMaxTasks(value int) *InspectPlanSpecApplyConfiguration {
	b.MaxTasks = &value
	return b
}

// WithClusterName adds the given value to the ClusterName field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ClusterName field.
func (b *InspectPlanSpecApplyConfiguration) WithClusterName(values ...*ClusterApplyConfiguration) *InspectPlanSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithClusterName")
		}
		b.ClusterName = append(b.ClusterName, *values[i])
	}
	return b
}

// WithKubeConfig sets the KubeConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KubeConfig field is set to the value of the last call.
func (b *InspectPlanSpecApplyConfiguration) WithKubeConfig(value string) *InspectPlanSpecApplyConfiguration {
	b.KubeConfig = &value
	return b
}

// WithOnce sets the Once field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Once field is set to the value of the last call.
func (b *InspectPlanSpecApplyConfiguration) WithOnce(value v1.Time) *InspectPlanSpecApplyConfiguration {
	b.Once = &value
	return b
}
