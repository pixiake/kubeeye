/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	kubeeyev1alpha2 "github.com/kubesphere/kubeeye/apis/kubeeye/v1alpha2"
)

// FileFilterRuleApplyConfiguration represents a declarative configuration of the FileFilterRule type for use
// with apply.
type FileFilterRuleApplyConfiguration struct {
	RuleItemBasesApplyConfiguration `json:",inline"`
	Path                            *string `json:"path,omitempty"`
	NodeApplyConfiguration          `json:",inline"`
}

// FileFilterRuleApplyConfiguration constructs a declarative configuration of the FileFilterRule type for use with
// apply.
func FileFilterRule() *FileFilterRuleApplyConfiguration {
	return &FileFilterRuleApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *FileFilterRuleApplyConfiguration) WithName(value string) *FileFilterRuleApplyConfiguration {
	b.RuleItemBasesApplyConfiguration.Name = &value
	return b
}

// WithRule sets the Rule field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Rule field is set to the value of the last call.
func (b *FileFilterRuleApplyConfiguration) WithRule(value string) *FileFilterRuleApplyConfiguration {
	b.RuleItemBasesApplyConfiguration.Rule = &value
	return b
}

// WithDesc sets the Desc field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Desc field is set to the value of the last call.
func (b *FileFilterRuleApplyConfiguration) WithDesc(value string) *FileFilterRuleApplyConfiguration {
	b.RuleItemBasesApplyConfiguration.Desc = &value
	return b
}

// WithLevel sets the Level field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Level field is set to the value of the last call.
func (b *FileFilterRuleApplyConfiguration) WithLevel(value kubeeyev1alpha2.Level) *FileFilterRuleApplyConfiguration {
	b.RuleItemBasesApplyConfiguration.Level = &value
	return b
}

// WithPath sets the Path field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Path field is set to the value of the last call.
func (b *FileFilterRuleApplyConfiguration) WithPath(value string) *FileFilterRuleApplyConfiguration {
	b.Path = &value
	return b
}

// WithNodeName sets the NodeName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeName field is set to the value of the last call.
func (b *FileFilterRuleApplyConfiguration) WithNodeName(value string) *FileFilterRuleApplyConfiguration {
	b.NodeApplyConfiguration.NodeName = &value
	return b
}

// WithNodeSelector puts the entries into the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeSelector field,
// overwriting an existing map entries in NodeSelector field with the same key.
func (b *FileFilterRuleApplyConfiguration) WithNodeSelector(entries map[string]string) *FileFilterRuleApplyConfiguration {
	if b.NodeApplyConfiguration.NodeSelector == nil && len(entries) > 0 {
		b.NodeApplyConfiguration.NodeSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeApplyConfiguration.NodeSelector[k] = v
	}
	return b
}
