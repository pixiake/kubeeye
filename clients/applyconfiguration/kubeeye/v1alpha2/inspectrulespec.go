/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// InspectRuleSpecApplyConfiguration represents a declarative configuration of the InspectRuleSpec type for use
// with apply.
type InspectRuleSpecApplyConfiguration struct {
	ComponentExclude   []string                               `json:"componentExclude,omitempty"`
	PrometheusEndpoint *string                                `json:"prometheusEndpoint,omitempty"`
	Opas               []OpaRuleApplyConfiguration            `json:"opas,omitempty"`
	Prometheus         *PrometheusConfigApplyConfiguration    `json:"prometheus,omitempty"`
	PromQL             []PrometheusRuleApplyConfiguration     `json:"promQL,omitempty"`
	FileChange         []FileChangeRuleApplyConfiguration     `json:"fileChange,omitempty"`
	Sysctl             []SysRuleApplyConfiguration            `json:"sysctl,omitempty"`
	Systemd            []SysRuleApplyConfiguration            `json:"systemd,omitempty"`
	FileFilter         []FileFilterRuleApplyConfiguration     `json:"fileFilter,omitempty"`
	CustomCommand      []CustomCommandRuleApplyConfiguration  `json:"customCommand,omitempty"`
	NodeInfo           []NodeInfoRuleApplyConfiguration       `json:"nodeInfo,omitempty"`
	ServiceConnect     []ServiceConnectRuleApplyConfiguration `json:"serviceConnect,omitempty"`
}

// InspectRuleSpecApplyConfiguration constructs a declarative configuration of the InspectRuleSpec type for use with
// apply.
func InspectRuleSpec() *InspectRuleSpecApplyConfiguration {
	return &InspectRuleSpecApplyConfiguration{}
}

// WithComponentExclude adds the given value to the ComponentExclude field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ComponentExclude field.
func (b *InspectRuleSpecApplyConfiguration) WithComponentExclude(values ...string) *InspectRuleSpecApplyConfiguration {
	for i := range values {
		b.ComponentExclude = append(b.ComponentExclude, values[i])
	}
	return b
}

// WithPrometheusEndpoint sets the PrometheusEndpoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PrometheusEndpoint field is set to the value of the last call.
func (b *InspectRuleSpecApplyConfiguration) WithPrometheusEndpoint(value string) *InspectRuleSpecApplyConfiguration {
	b.PrometheusEndpoint = &value
	return b
}

// WithOpas adds the given value to the Opas field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Opas field.
func (b *InspectRuleSpecApplyConfiguration) WithOpas(values ...*OpaRuleApplyConfiguration) *InspectRuleSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithOpas")
		}
		b.Opas = append(b.Opas, *values[i])
	}
	return b
}

// WithPrometheus sets the Prometheus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Prometheus field is set to the value of the last call.
func (b *InspectRuleSpecApplyConfiguration) WithPrometheus(value *PrometheusConfigApplyConfiguration) *InspectRuleSpecApplyConfiguration {
	b.Prometheus = value
	return b
}

// WithPromQL adds the given value to the PromQL field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PromQL field.
func (b *InspectRuleSpecApplyConfiguration) WithPromQL(values ...*PrometheusRuleApplyConfiguration) *InspectRuleSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPromQL")
		}
		b.PromQL = append(b.PromQL, *values[i])
	}
	return b
}

// WithFileChange adds the given value to the FileChange field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FileChange field.
func (b *InspectRuleSpecApplyConfiguration) WithFileChange(values ...*FileChangeRuleApplyConfiguration) *InspectRuleSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFileChange")
		}
		b.FileChange = append(b.FileChange, *values[i])
	}
	return b
}

// WithSysctl adds the given value to the Sysctl field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Sysctl field.
func (b *InspectRuleSpecApplyConfiguration) WithSysctl(values ...*SysRuleApplyConfiguration) *InspectRuleSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSysctl")
		}
		b.Sysctl = append(b.Sysctl, *values[i])
	}
	return b
}

// WithSystemd adds the given value to the Systemd field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Systemd field.
func (b *InspectRuleSpecApplyConfiguration) WithSystemd(values ...*SysRuleApplyConfiguration) *InspectRuleSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSystemd")
		}
		b.Systemd = append(b.Systemd, *values[i])
	}
	return b
}

// WithFileFilter adds the given value to the FileFilter field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FileFilter field.
func (b *InspectRuleSpecApplyConfiguration) WithFileFilter(values ...*FileFilterRuleApplyConfiguration) *InspectRuleSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFileFilter")
		}
		b.FileFilter = append(b.FileFilter, *values[i])
	}
	return b
}

// WithCustomCommand adds the given value to the CustomCommand field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CustomCommand field.
func (b *InspectRuleSpecApplyConfiguration) WithCustomCommand(values ...*CustomCommandRuleApplyConfiguration) *InspectRuleSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithCustomCommand")
		}
		b.CustomCommand = append(b.CustomCommand, *values[i])
	}
	return b
}

// WithNodeInfo adds the given value to the NodeInfo field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NodeInfo field.
func (b *InspectRuleSpecApplyConfiguration) WithNodeInfo(values ...*NodeInfoRuleApplyConfiguration) *InspectRuleSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNodeInfo")
		}
		b.NodeInfo = append(b.NodeInfo, *values[i])
	}
	return b
}

// WithServiceConnect adds the given value to the ServiceConnect field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ServiceConnect field.
func (b *InspectRuleSpecApplyConfiguration) WithServiceConnect(values ...*ServiceConnectRuleApplyConfiguration) *InspectRuleSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithServiceConnect")
		}
		b.ServiceConnect = append(b.ServiceConnect, *values[i])
	}
	return b
}
