/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	kubeeyev1alpha2 "github.com/kubesphere/kubeeye/apis/kubeeye/v1alpha2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// InspectTaskStatusApplyConfiguration represents a declarative configuration of the InspectTaskStatus type for use
// with apply.
type InspectTaskStatusApplyConfiguration struct {
	*ClusterInfoApplyConfiguration `json:"clusterInfo,omitempty"`
	JobPhase                       []JobPhaseApplyConfiguration `json:"jobPhase,omitempty"`
	StartTimestamp                 *v1.Time                     `json:"startTimestamp,omitempty"`
	EndTimestamp                   *v1.Time                     `json:"endTimestamp,omitempty"`
	Duration                       *string                      `json:"duration,omitempty"`
	Status                         *kubeeyev1alpha2.Phase       `json:"status,omitempty"`
	InspectRuleType                []string                     `json:"inspectRuleType,omitempty"`
}

// InspectTaskStatusApplyConfiguration constructs a declarative configuration of the InspectTaskStatus type for use with
// apply.
func InspectTaskStatus() *InspectTaskStatusApplyConfiguration {
	return &InspectTaskStatusApplyConfiguration{}
}

// WithClusterVersion sets the ClusterVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterVersion field is set to the value of the last call.
func (b *InspectTaskStatusApplyConfiguration) WithClusterVersion(value string) *InspectTaskStatusApplyConfiguration {
	b.ensureClusterInfoApplyConfigurationExists()
	b.ClusterInfoApplyConfiguration.ClusterVersion = &value
	return b
}

// WithNodesCount sets the NodesCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodesCount field is set to the value of the last call.
func (b *InspectTaskStatusApplyConfiguration) WithNodesCount(value int) *InspectTaskStatusApplyConfiguration {
	b.ensureClusterInfoApplyConfigurationExists()
	b.ClusterInfoApplyConfiguration.NodesCount = &value
	return b
}

// WithNamespacesCount sets the NamespacesCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NamespacesCount field is set to the value of the last call.
func (b *InspectTaskStatusApplyConfiguration) WithNamespacesCount(value int) *InspectTaskStatusApplyConfiguration {
	b.ensureClusterInfoApplyConfigurationExists()
	b.ClusterInfoApplyConfiguration.NamespacesCount = &value
	return b
}

func (b *InspectTaskStatusApplyConfiguration) ensureClusterInfoApplyConfigurationExists() {
	if b.ClusterInfoApplyConfiguration == nil {
		b.ClusterInfoApplyConfiguration = &ClusterInfoApplyConfiguration{}
	}
}

// WithJobPhase adds the given value to the JobPhase field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the JobPhase field.
func (b *InspectTaskStatusApplyConfiguration) WithJobPhase(values ...*JobPhaseApplyConfiguration) *InspectTaskStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithJobPhase")
		}
		b.JobPhase = append(b.JobPhase, *values[i])
	}
	return b
}

// WithStartTimestamp sets the StartTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartTimestamp field is set to the value of the last call.
func (b *InspectTaskStatusApplyConfiguration) WithStartTimestamp(value v1.Time) *InspectTaskStatusApplyConfiguration {
	b.StartTimestamp = &value
	return b
}

// WithEndTimestamp sets the EndTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EndTimestamp field is set to the value of the last call.
func (b *InspectTaskStatusApplyConfiguration) WithEndTimestamp(value v1.Time) *InspectTaskStatusApplyConfiguration {
	b.EndTimestamp = &value
	return b
}

// WithDuration sets the Duration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Duration field is set to the value of the last call.
func (b *InspectTaskStatusApplyConfiguration) WithDuration(value string) *InspectTaskStatusApplyConfiguration {
	b.Duration = &value
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *InspectTaskStatusApplyConfiguration) WithStatus(value kubeeyev1alpha2.Phase) *InspectTaskStatusApplyConfiguration {
	b.Status = &value
	return b
}

// WithInspectRuleType adds the given value to the InspectRuleType field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the InspectRuleType field.
func (b *InspectTaskStatusApplyConfiguration) WithInspectRuleType(values ...string) *InspectTaskStatusApplyConfiguration {
	for i := range values {
		b.InspectRuleType = append(b.InspectRuleType, values[i])
	}
	return b
}
