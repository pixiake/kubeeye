/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	kubeeyev1alpha2 "github.com/kubesphere/kubeeye/apis/kubeeye/v1alpha2"
)

// InspectTaskSpecApplyConfiguration represents a declarative configuration of the InspectTaskSpec type for use
// with apply.
type InspectTaskSpecApplyConfiguration struct {
	ClusterName   []ClusterApplyConfiguration          `json:"clusterName,omitempty"`
	RuleNames     []InspectRuleNamesApplyConfiguration `json:"ruleNames,omitempty"`
	Timeout       *string                              `json:"timeout,omitempty"`
	InspectPolicy *kubeeyev1alpha2.Policy              `json:"inspectPolicy,omitempty"`
}

// InspectTaskSpecApplyConfiguration constructs a declarative configuration of the InspectTaskSpec type for use with
// apply.
func InspectTaskSpec() *InspectTaskSpecApplyConfiguration {
	return &InspectTaskSpecApplyConfiguration{}
}

// WithClusterName adds the given value to the ClusterName field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ClusterName field.
func (b *InspectTaskSpecApplyConfiguration) WithClusterName(values ...*ClusterApplyConfiguration) *InspectTaskSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithClusterName")
		}
		b.ClusterName = append(b.ClusterName, *values[i])
	}
	return b
}

// WithRuleNames adds the given value to the RuleNames field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the RuleNames field.
func (b *InspectTaskSpecApplyConfiguration) WithRuleNames(values ...*InspectRuleNamesApplyConfiguration) *InspectTaskSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRuleNames")
		}
		b.RuleNames = append(b.RuleNames, *values[i])
	}
	return b
}

// WithTimeout sets the Timeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timeout field is set to the value of the last call.
func (b *InspectTaskSpecApplyConfiguration) WithTimeout(value string) *InspectTaskSpecApplyConfiguration {
	b.Timeout = &value
	return b
}

// WithInspectPolicy sets the InspectPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InspectPolicy field is set to the value of the last call.
func (b *InspectTaskSpecApplyConfiguration) WithInspectPolicy(value kubeeyev1alpha2.Policy) *InspectTaskSpecApplyConfiguration {
	b.InspectPolicy = &value
	return b
}
